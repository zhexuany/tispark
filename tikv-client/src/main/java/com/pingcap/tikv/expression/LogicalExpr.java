// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: expression.proto

package com.pingcap.tikv.expression;

import static java.util.Objects.requireNonNull;

import com.google.common.collect.ImmutableList;
import java.util.List;
import java.util.Objects;

public class LogicalExpr extends BinaryExpression {
  public enum Type {
    AND,
    OR,
    XOR
  }

  public static LogicalExpr and(Expression left, Expression right) {
    return new LogicalExpr(Type.AND, left, right);
  }

  public static LogicalExpr or(Expression left, Expression right) {
    return new LogicalExpr(Type.OR, left, right);
  }

  public static LogicalExpr xor(Expression left, Expression right) {
    return new LogicalExpr(Type.XOR, left, right);
  }

  public LogicalExpr(Type type, Expression left, Expression right) {
    this.left = requireNonNull(left, "left expression is null");
    this.right = requireNonNull(right, "right expression is null");
    this.compType = requireNonNull(type, "type is null");
  }

  @Override
  public List<Expression> getChildren() {
    return ImmutableList.of(getLeft(), getRight());
  }

  @Override
  public <R, C> R accept(Visitor<R, C> visitor, C context) {
    return visitor.visit(this, context);
  }

  public Type getCompType() {
    return compType;
  }

  private final Type compType;

  @Override
  public boolean equals(Object other) {
    if (this == other) {
      return true;
    }
    if (!(other instanceof LogicalExpr)) {
      return false;
    }

    LogicalExpr that = (LogicalExpr) other;
    return (compType == that.compType)
        && Objects.equals(left, that.left)
        && Objects.equals(right, that.right);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compType, left, right);
  }

  @Override
  public String toString() {
    return String.format("[%s %s %s]", getLeft(), getCompType(), getRight());
  }
}
